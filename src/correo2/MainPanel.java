/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package correo2;

import excel.ExcelReader;
import java.awt.BorderLayout;
import java.text.ParseException;
import java.util.Date;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import util.Utilsapp;
import java.io.File;
import java.text.Normalizer;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Locale;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JTextArea;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import mail.SendMail;

/**
 *
 * @author dmarcobo
 */
public class MainPanel extends javax.swing.JPanel {
    
    private final ExcelReader exfile;
    private final String FMTFECHA = "dd/MM/yy";
    
    public enum Error {
        NONE, NOCONNECT, OTHER;
    }
    
    public enum Tarea {
        CORREOSEMANAL, CORREODIARIO, CARGAFICHERO;
    }
    
    class ElemGroup{
        public String actor;
        public List <ExcelReader.DesvioData> grupo;
        
        public ElemGroup(){
            grupo = new ArrayList <>();
            actor = "";
        }
    }
    
    /**
     * Creates new form NewJPanel
     */
    public MainPanel() {
        initComponents();
        
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(tablaPlazoAtraso.getModel());
        tablaPlazoAtraso.setRowSorter(sorter);
        
        TableRowSorter<TableModel> sorter1 = new TableRowSorter<>(tablaPlazoHoy.getModel());
        tablaPlazoHoy.setRowSorter(sorter1);
        
        TableRowSorter<TableModel> sorter3 = new TableRowSorter<>(tablaSemanal.getModel()); 
        tablaSemanal.setRowSorter(sorter3);
        
        exfile = new ExcelReader();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblFilePeti = new javax.swing.JLabel();
        txtFilePeti = new javax.swing.JTextField();
        btnAbrir = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lblPlazoAtraso = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaPlazoAtraso = new javax.swing.JTable();
        lblPlazoHoy = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaPlazoHoy = new javax.swing.JTable();
        lblSemanal = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaSemanal = new javax.swing.JTable();
        btnSend = new javax.swing.JButton();
        lblFileEstado = new javax.swing.JLabel();
        txtFileEstado = new javax.swing.JTextField();
        btnEstado = new javax.swing.JButton();
        btnSendSemana = new javax.swing.JButton();

        lblFilePeti.setText("Fichero");

        txtFilePeti.setToolTipText("Excel con la descarga de 24H con los datos de fecha de las peticiones ");
        txtFilePeti.setName("rutaFichero"); // NOI18N
        txtFilePeti.setPreferredSize(new java.awt.Dimension(250, 22));

        btnAbrir.setText("Abrir");
        btnAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirActionPerformed(evt);
            }
        });

        lblPlazoAtraso.setText("Peticiones atrasadas");

        tablaPlazoAtraso.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Petición", "Estado", "Tipo", "Fecha", "Nombre", "Responsable", "Estado Real"
            }
        ));
        tablaPlazoAtraso.setMaximumSize(new java.awt.Dimension(32767, 32767));
        tablaPlazoAtraso.setMinimumSize(new java.awt.Dimension(28, 32));
        tablaPlazoAtraso.setName(""); // NOI18N
        tablaPlazoAtraso.setRequestFocusEnabled(false);
        jScrollPane2.setViewportView(tablaPlazoAtraso);

        lblPlazoHoy.setText("Peticiones que cumplen hoy");

        tablaPlazoHoy.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Petición", "Estado", "Tipo", "Fecha", "Nombre", "Responsable", "Estado Real"
            }
        ));
        tablaPlazoHoy.setMaximumSize(new java.awt.Dimension(32767, 32767));
        tablaPlazoHoy.setMinimumSize(new java.awt.Dimension(28, 32));
        tablaPlazoHoy.setName(""); // NOI18N
        tablaPlazoHoy.setRequestFocusEnabled(false);
        jScrollPane1.setViewportView(tablaPlazoHoy);

        lblSemanal.setText("Peticiones que cumplen en toda la semana");

        tablaSemanal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Petición", "Estado", "Tipo", "Fecha", "Nombre", "Responsable", "Estado Real"
            }
        ));
        tablaSemanal.setMaximumSize(new java.awt.Dimension(32767, 32767));
        tablaSemanal.setMinimumSize(new java.awt.Dimension(28, 32));
        tablaSemanal.setName(""); // NOI18N
        tablaSemanal.setRequestFocusEnabled(false);
        jScrollPane3.setViewportView(tablaSemanal);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 975, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPlazoAtraso)
                            .addComponent(lblPlazoHoy)
                            .addComponent(lblSemanal))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 975, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPlazoAtraso)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPlazoHoy)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSemanal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnSend.setText("Enviar Correo");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        lblFileEstado.setText("Fichero");

        txtFileEstado.setToolTipText("Excel con la descarga actual del estado de las peticiones");
        txtFileEstado.setName("rutaFichero"); // NOI18N
        txtFileEstado.setPreferredSize(new java.awt.Dimension(250, 22));

        btnEstado.setText("Comprobar estado");
        btnEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEstadoActionPerformed(evt);
            }
        });

        btnSendSemana.setText("Enviar Correo Semanal");
        btnSendSemana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendSemanaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(lblFileEstado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFileEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEstado))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(lblFilePeti)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFilePeti, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAbrir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSend)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSendSemana)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtFilePeti, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblFilePeti))
                            .addComponent(btnAbrir))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFileEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEstado)
                            .addComponent(lblFileEstado)))
                    .addComponent(btnSend, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSendSemana, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("XLSX Files", "xlsx");
        fileChooser.setFileFilter(filter);
        
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
          File selectedFile = fileChooser.getSelectedFile();
          txtFilePeti.setText(selectedFile.getPath());
          procesarPeticiones();
        }       
    }//GEN-LAST:event_btnAbrirActionPerformed

    private void procesarPeticiones(){
        workerSendCorreoSemanal(Tarea.CARGAFICHERO);
    }
    

            
            
    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        workerSendCorreoSemanal(Tarea.CORREODIARIO);
    }//GEN-LAST:event_btnSendActionPerformed

    private void btnEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEstadoActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        
        FileNameExtensionFilter filter = new FileNameExtensionFilter("XLS Files", "xls");
        fileChooser.setFileFilter(filter);
        
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            txtFileEstado.setText(selectedFile.getPath());
            ExcelReader exRead = new ExcelReader();
            exRead.readActualPetStatus(selectedFile.getPath());
          
            // Obtener el número de filas del JTable
            DefaultTableModel dtm = (DefaultTableModel) tablaPlazoHoy.getModel();
            int filas = dtm.getRowCount();
            String peticion;

            // Recorrer la tabla
            for (int i = 0; i < filas ; i++){
                peticion = String.valueOf(tablaPlazoHoy.getValueAt(i, 0));
                if (exRead.getEstadoPeticiones().containsKey(peticion)){
                    tablaPlazoHoy.setValueAt(exRead.getEstadoPeticiones().get(peticion).getStrPetStatus(), i, 6);
                }
            } // end for
            
            // Obtener el número de filas del JTable
            DefaultTableModel dtm2 = (DefaultTableModel) tablaPlazoAtraso.getModel();
            filas = dtm2.getRowCount();

            // Recorrer la tabla
            for (int i = 0; i < filas ; i++){
                peticion = String.valueOf(tablaPlazoAtraso.getValueAt(i, 0));
                if (exRead.getEstadoPeticiones().containsKey(peticion)){
                    tablaPlazoAtraso.setValueAt(exRead.getEstadoPeticiones().get(peticion).getStrPetStatus(), i, 6);
                }
            } // end for
          
        }    
    }//GEN-LAST:event_btnEstadoActionPerformed

    private void btnSendSemanaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendSemanaActionPerformed
        workerSendCorreoSemanal(Tarea.CORREOSEMANAL);
    }//GEN-LAST:event_btnSendSemanaActionPerformed
    
    
    private void generarCorreos(List<ElemGroup> listaAgrupada, Date hoy, String subject, String msg1, String msg2, String msg3, String msg4) throws RuntimeException{
        generarCorreos(listaAgrupada,  hoy,  subject,  msg1,  msg2,  msg3,  msg4, false);
    }
    /**
     * 
     * @param listaAgrupada
     * @param hoy 
     */
    private void generarCorreos(List<ElemGroup> listaAgrupada, Date hoy, String subject, String msg1, String msg2, String msg3, String msg4, boolean dayName) throws RuntimeException{
        SendMail mail = new SendMail();
               
        for (ElemGroup listaAgrupada1 : listaAgrupada) {
            String actor = listaAgrupada1.actor.split(" ")[0].toLowerCase();
            actor = actor.substring(0,1).toUpperCase() + actor.substring(1);
            StringBuilder htmlCode;
            htmlCode = new StringBuilder("<html><head>");
            
            htmlCode.append("<link rel=\"stylesheet\" href=\"/lib/w3.css\"><style>");
            
            
            htmlCode.append("table {\n"
                    + "    border-collapse: collapse;\n"
                    + "}");
            htmlCode.append("table, th, td {\n"
                    + "   border: 1px solid black;\n"
                    + "}");

            htmlCode.append("th, td {\n"
                    + "    padding: 15px;\n"
                    + "    text-align: left;\n"
                    + "}");
            htmlCode.append("tr:nth-child(even) {background-color: #f2f2f2}");

            htmlCode.append("th {\n"
                    + "    background-color: #99AE04;\n"
                    + "    color: white;\n"
                    + "}");
            
            htmlCode.append("</style></link>");
            
            htmlCode.append("<title></title></head><body>");
            htmlCode.append("Buenos días ").append(actor).append("<br/>");
            htmlCode.append("<br/><br/>");
            htmlCode.append("Tienes ").append(listaAgrupada1.grupo.size());
            if (listaAgrupada1.grupo.size() > 1) {
                htmlCode.append(msg1);
                htmlCode.append(msg2);
            } else {
                htmlCode.append(msg3);
                htmlCode.append(msg4);
            }
            htmlCode.append("<br/><br/>");
            htmlCode.append("<table><tr>");
            htmlCode.append("<th><b>Peticion</b></th>");
            htmlCode.append("<th><b>Tipo</b></th>");
            htmlCode.append("<th><b>Fecha entrega</b></th>");
            htmlCode.append("<th><b>Nombre</b></th>");
            htmlCode.append("</tr>");
            
            // EEE gives short day names, EEEE would be full length.
            SimpleDateFormat dateFormat = new SimpleDateFormat("EEEE", Locale.getDefault()); 
            
            int peticion;
            
            for (ExcelReader.DesvioData grupo : listaAgrupada1.grupo) {
                peticion = grupo.getTipo() == ExcelReader.TipoPet.PETICION ? grupo.getPeticion() : grupo.getTipo() == ExcelReader.TipoPet.OT ? grupo.getOt() : 0;
                htmlCode.append("<tr><td>").append(peticion).append("</td>");
                htmlCode.append("<td>").append(grupo.getTipo().text()).append("</td>");
                htmlCode.append("<td>").append(Utilsapp.dateToStr(grupo.getFechaFinAcuerdo(), FMTFECHA));
                if (dayName) htmlCode.append(" (").append(dateFormat.format(grupo.getFechaFinAcuerdo())).append(")");
                htmlCode.append("</td>");
                htmlCode.append("<td>").append(grupo.getNombrePet()).append("</td>");
                htmlCode.append("</tr>");
            }
            htmlCode.append("</table>");
            htmlCode.append("<br/><br/>Muchas gracias</body></html>");
            String[] nombreArr = listaAgrupada1.actor.split(" ");
            String tmp;
            String correo = "";
            for (int j=0; j < nombreArr.length; j++){
                tmp = nombreArr[j].toLowerCase();
                tmp = tmp.substring(0,1).toUpperCase() + tmp.substring(1);
                correo += (j > 0 ? "." : "") + tmp;
            }
            correo += "@everis.com";
            
            String normalized = Normalizer.normalize(correo, Normalizer.Form.NFD);
            String accentRemoved = normalized.replaceAll("\\p{InCombiningDiacriticalMarks}+", "");
            System.out.println("Enviando mail a: " + accentRemoved);
            
            mail.setTo(accentRemoved);
            mail.setSubject(subject + Utilsapp.dateToStr(hoy, FMTFECHA) + " " + correo);
            mail.setHtmlMessage(htmlCode.toString());
            mail.send();
        }
    }
    
    public void dialogWait(){
        
    }
    
    /**
     * 
     * @param varTarea 
     */
    public void workerSendCorreoSemanal(Tarea varTarea){
        JTextArea msgLabel;
        JProgressBar progressBar;
        final int MAXIMUM = 100;
        JPanel panel;

        progressBar = new JProgressBar(0, MAXIMUM);
        progressBar.setIndeterminate(true);
        msgLabel = new JTextArea("Espere un momento por favor...");
        msgLabel.setEditable(false);

        panel = new JPanel(new BorderLayout(5, 5));
        panel.add(msgLabel, BorderLayout.PAGE_START);
        panel.add(progressBar, BorderLayout.CENTER);
        panel.setBorder(BorderFactory.createEmptyBorder(11, 11, 11, 11));

        final JDialog dialog = new JDialog();
        dialog.getContentPane().add(panel);
        dialog.setResizable(false);
        dialog.pack();
        dialog.setSize(500, dialog.getHeight());
        dialog.setLocationRelativeTo(this);
        dialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
        dialog.setAlwaysOnTop(false);
        dialog.setVisible(true);
        msgLabel.setBackground(panel.getBackground());
        
        SwingWorker worker = new SwingWorker() {
            
            Error resultado;
            
            @Override
            protected void done() {
                // Close the dialog
                dialog.dispose();
                if (resultado == Error.NOCONNECT){
                    JOptionPane.showMessageDialog(null, "Error de conexión. Revise los datos de configuración");
                } else if (resultado == Error.OTHER){
                    JOptionPane.showMessageDialog(null, "Error de aplicación");
                }      
            }

            @Override
            protected void process(List chunks) {
                if (chunks != null && chunks.size() > 0){
                   resultado = (Error)chunks.get(0);
                }                   
            }

            @Override
            protected Object doInBackground() throws Exception {
                // Do the long running task here
                // Call "publish()" to pass the data to "process()"
                // return something meaningful
                try{
                    if (varTarea == Tarea.CORREOSEMANAL){
                        procSendCorreoSemanal();
                    } else if (varTarea == Tarea.CORREODIARIO){
                        procCorreoDiario();
                    } else if (varTarea == Tarea.CARGAFICHERO){
                        procAbrirFicheroPeticiones();
                    }
                    publish(Error.NONE);
                } catch(RuntimeException e){
                    publish(Error.NOCONNECT);
                } catch(ParseException e){
                    publish(Error.OTHER);
                }
                return null;
            }
        };
            
        worker.execute();      
    }
    
    /**
     * 
     * @throws ParseException
     * @throws RuntimeException 
     */
    public void procSendCorreoSemanal() throws ParseException, RuntimeException{
        List<ElemGroup> listaAgrupSem = new ArrayList<>();
        
            Date hoyHoras = new Date();
            Date hoy = Utilsapp.strToDate(Utilsapp.dateToStr(hoyHoras, FMTFECHA), FMTFECHA);
            List<ExcelReader.DesvioData> lista = exfile.getListadoDesvios();
            
            Calendar c = Calendar.getInstance();
            c.setTime(hoy); // Now use today date.
            c.add(Calendar.DATE, 7); // Adding 7 days
            Date hoy_mas_7 = c.getTime();
            
            lista.stream().filter((lista1) -> (lista1.getFechaFinAcuerdo() != null 
                && lista1.getEstado().code() == ExcelReader.EstadoPet.EJECUCION.code())).forEach((lista1) -> {
                    //peticiones a entregar durante la semana
                    if (hoy.before(lista1.getFechaFinAcuerdo()) && hoy_mas_7.after(lista1.getFechaFinAcuerdo())){
                        boolean found = false;
                        int posFound = 0;
                        for (int i=0; i < listaAgrupSem.size(); i++){
                            if (listaAgrupSem.get(i).actor.equals(lista1.getActor()) ){
                                found = true;
                                posFound = i;
                            }
                        }
                        
                        if (!found){
                            ElemGroup elem = new ElemGroup();
                            elem.actor = lista1.getActor();
                            elem.grupo.add(lista1);
                            listaAgrupSem.add(elem);
                        } else {
                            listaAgrupSem.get(posFound).grupo.add(lista1);
                        }
                    }
            });
            
            generarCorreos(listaAgrupSem, hoy, 
                    "Peticiones semanales a entregar ",
                    " peticiones a entregar durante la semana.", 
                    " Por favor, intenta regularizarlas antes de que se termine el plazo",
                    " petición a entregar durante la semana.",
                    " Por favor, intenta regularizarla antes de que se termine el plazo",
                    true);     
    }
    
    /**
     * 
     * @throws ParseException
     * @throws RuntimeException 
     */
    public void procCorreoDiario() throws ParseException, RuntimeException{
        List<ElemGroup> listaAgrupHoy = new ArrayList<>();
        List<ElemGroup> listaAgrupPasadas = new ArrayList<>();
        
            Date hoyHoras = new Date();
            Date hoy = Utilsapp.strToDate(Utilsapp.dateToStr(hoyHoras, FMTFECHA), FMTFECHA);
            List<ExcelReader.DesvioData> lista = exfile.getListadoDesvios();
            
            
            lista.stream().filter((lista1) -> (lista1.getFechaFinAcuerdo() != null 
                && lista1.getEstado().code() == ExcelReader.EstadoPet.EJECUCION.code())).forEach((lista1) -> {

                    //peticiones a entregar hoy
                    if (hoy.equals(lista1.getFechaFinAcuerdo())) {
                        boolean found = false;
                        int posFound = 0;
                        for (int i=0; i < listaAgrupHoy.size(); i++){
                            if (listaAgrupHoy.get(i).actor.equals(lista1.getActor()) ){
                                found = true;
                                posFound = i;
                            }
                        }
                        
                        if (!found){
                            ElemGroup elem = new ElemGroup();
                            elem.actor = lista1.getActor();
                            elem.grupo.add(lista1);
                            listaAgrupHoy.add(elem);
                        } else {
                            listaAgrupHoy.get(posFound).grupo.add(lista1);
                        }
                    }
                    
                    //peticiones pasadas
                    if (hoy.after(lista1.getFechaFinAcuerdo())) {
                        boolean found = false;
                        int posFound = 0;
                        for (int i=0; i < listaAgrupPasadas.size(); i++){
                            if (listaAgrupPasadas.get(i).actor.equals(lista1.getActor()) ){
                                found = true;
                                posFound = i;
                            }
                        }
                        
                        if (!found){
                            ElemGroup elem = new ElemGroup();
                            elem.actor = lista1.getActor();
                            elem.grupo.add(lista1);
                            listaAgrupPasadas.add(elem);
                        } else {
                            listaAgrupPasadas.get(posFound).grupo.add(lista1);
                        }
                    }
            });
            
            generarCorreos(listaAgrupHoy, hoy, 
                    "Peticiones a entregar ",
                    " peticiones que cerrar hoy.", 
                    " Por favor, revísalas a continuación para que no aparezcas en sucesivos informes",
                    " petición que cerrar hoy.",
                    " Por favor, revísala a continuación para que no aparezcas en sucesivos informes");
            
            generarCorreos(listaAgrupPasadas, hoy,
                    "Peticiones desviadas ", 
                    " peticiones desviadas.", 
                    " Por favor, revísalas a continuación para que no aparezcas en sucesivos informes",
                    " petición desviada.",
                    " Por favor, revísala a continuación para que no aparezcas en sucesivos informes");
            
    }
    
    /**
     * 
     * @throws ParseException
     * @throws RuntimeException 
     */
    public void procAbrirFicheroPeticiones() throws ParseException, RuntimeException{
            if (txtFilePeti.getText() == null || (txtFilePeti.getText() != null && txtFilePeti.getText().isEmpty())){
                JOptionPane.showMessageDialog(this, "Debes seleccionar un fichero");
                return;
            }
            
            exfile.readExcel(txtFilePeti.getText());

            List<ExcelReader.DesvioData> lista = exfile.getListadoDesvios();
            Date hoyHoras = new Date();
            Date hoy = Utilsapp.strToDate(Utilsapp.dateToStr(hoyHoras, FMTFECHA), FMTFECHA);
            
            Calendar c = Calendar.getInstance();
            c.setTime(hoy); // Now use today date.
            c.add(Calendar.DATE, 7); // Adding 7 days
            Date hoy_mas_7 = c.getTime();

            System.out.println(Utilsapp.dateToStr(hoy, "dd/MM/yyyy hh:mm:ss") +  " Hay " +  lista.size());
            
            //System.out.println("******** Peticiones RETRASADAS: ");
            DefaultTableModel modelHoy = (DefaultTableModel) tablaPlazoHoy.getModel();
            DefaultTableModel modelAtraso = (DefaultTableModel) tablaPlazoAtraso.getModel();
            DefaultTableModel modelSem = (DefaultTableModel) tablaSemanal.getModel();
            
            
            lista.stream().filter((lista1) -> (lista1.getFechaFinAcuerdo() != null 
                && lista1.getEstado().code() == ExcelReader.EstadoPet.EJECUCION.code())).forEach((lista1) -> {
                    int codigoPet;
                    if (lista1.getTipo() == ExcelReader.TipoPet.PETICION){
                        codigoPet = lista1.getPeticion();
                    } else if (lista1.getTipo() == ExcelReader.TipoPet.OT){
                        codigoPet = lista1.getOt();
                    } else {
                        codigoPet = 0;
                    }
                   
                    Object [] fila = new Object[]{codigoPet, lista1.getEstado().text(),
                            lista1.getTipo().text(),
                            Utilsapp.dateToStr(lista1.getFechaFinAcuerdo(), FMTFECHA),
                            lista1.getNombrePet(),
                            lista1.getActor()};

                    if (hoy.after(lista1.getFechaFinAcuerdo())) {
                        modelAtraso.addRow(fila);
                    } else if (hoy.equals(lista1.getFechaFinAcuerdo())) {
                        modelHoy.addRow(fila);
                    } else if (hoy.before(lista1.getFechaFinAcuerdo()) && hoy_mas_7.after(lista1.getFechaFinAcuerdo())){
                        modelSem.addRow(fila);
                    }
                });

            lblPlazoAtraso.setText("Peticiones retrasadas: " + modelAtraso.getRowCount()); 
            lblPlazoHoy.setText("Peticiones que cumplen hoy: " + modelHoy.getRowCount()); 
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbrir;
    private javax.swing.JButton btnEstado;
    private javax.swing.JButton btnSend;
    private javax.swing.JButton btnSendSemana;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblFileEstado;
    private javax.swing.JLabel lblFilePeti;
    private javax.swing.JLabel lblPlazoAtraso;
    private javax.swing.JLabel lblPlazoHoy;
    private javax.swing.JLabel lblSemanal;
    private javax.swing.JTable tablaPlazoAtraso;
    private javax.swing.JTable tablaPlazoHoy;
    private javax.swing.JTable tablaSemanal;
    private javax.swing.JTextField txtFileEstado;
    private javax.swing.JTextField txtFilePeti;
    // End of variables declaration//GEN-END:variables
}
